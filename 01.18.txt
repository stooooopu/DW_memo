
리턴타입과 파라미터 헷갈릴때

select 	=> return type
	*
from emp
where 
empno = <번호> =>파라미터 타입


method overloading 
-목적 : 이름이 같은 여러개의 메소드를 중복 선언하여 사용의 편리성 제공
-조건
1. 이름이 동일
2. 인자의 갯수가 다르거나 인자의 타입이 달라야 함
3. 동일한 클래스 파일안에 있어야 함

//인자가 같고 리턴타입이 달라도 에러는 남 
int getSum (int x, int y)
String getSum (int x, int y)
=>error

int getSum (String x, int y)
int getSum (int x, int y)
=>ok

===> 결론 : 메소드는 파라미터가 중요!


클래스	자바 <객체지향언어>
-what is '객체'?
	고유한 특성을 가짐
	객체들이 모여서 하나의 프로그램이 탄생
-객체지향언어의 특징(면접필수)
	1) 캡슐화
	-내부를 마치 캡슐처럼 보호
	{method...}이렇게 중괄호로 메소드를 보호하는 것 처럼 느껴지나봄

	2) 상속
	- 클래스를 부모와 자식으로 두고 부모의 기능을 물려받음

	3) 다형성 
	- 같은 이름의 메소드가 다르게 구현(메소드 오버로딩, 오버라이딩)
	
public class는 해당 클래스 파일에 한 번만 => 고유하다
ex) public class A{
public class B{ }
} =>error


*메소드에 접근지정자를 private으로 호출하면 해당 메소드를 호출할 수 없다 


자바 main함수에는

static함수와
new선언으로 만든 클래스 메소드가 올 수 있다

dw코딩 규칙
 변수생성
1. 메소드에 리턴값이 있으면 변수로 받는다
2. 선언한 변수가 행동이 일어나서 결과값이 생길 때
ex) int x = 10; int y = 10;
     int sum = x + y; //sum으로 데이터를 받는다
3. 선언한 변수가 정말 필요한지 고민(재활용이 가능한지)
4. 지역변수에서만 활용할 건지 전역변수로 활용할 건지 고민

☆★☆★메소드 분리하는 방법
1. 함수가 어려우면 메인함수에 코딩
2. 메인함수로 결과가 나오면 함수로 분리할 것
3. 꼐속꼐속 고민 또 고민